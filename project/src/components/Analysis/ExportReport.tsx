import React from 'react';
import { DownloadIcon } from '../Icons';
import Button from '../ui/Button';
import { BusinessAnalysis } from '../../utils/analysis';
import { QuestionnaireAnswers, questionnaireSections } from '../../utils/questionnaire';

interface ExportReportProps {
  analysis: BusinessAnalysis;
  answers: QuestionnaireAnswers;
}

const ExportReport: React.FC<ExportReportProps> = ({ analysis, answers }) => {
  const generateReport = () => {
    // Helper function to get question text
    const getQuestionText = (questionId: string) => {
      for (const section of questionnaireSections) {
        for (const question of section.questions) {
          if (question.id === questionId) {
            return question.question;
          }
        }
      }
      return questionId;
    };

    // Helper function to get option label if it's a select/radio question
    const getOptionLabel = (questionId: string, value: string) => {
      for (const section of questionnaireSections) {
        for (const question of section.questions) {
          if (question.id === questionId && question.options) {
            const option = question.options.find(opt => opt.value === value);
            if (option) return option.label;
          }
        }
      }
      return value;
    };

    // Create a report content
    let reportContent = `# QUEST YOUR BUSINESS (QYB) - BUSINESS ANALYSIS REPORT\n\n`;
    reportContent += `## Overall Business Health\n\n`;
    reportContent += `Score: ${analysis.overallHealth.score}/${analysis.overallHealth.maxScore}\n`;
    reportContent += `Assessment: ${analysis.overallHealth.label}\n`;
    reportContent += `Description: ${analysis.overallHealth.description}\n\n`;
    
    reportContent += `## Category Scores\n\n`;
    analysis.categoryScores.forEach(score => {
      reportContent += `### ${score.category.charAt(0).toUpperCase() + score.category.slice(1)}\n`;
      reportContent += `Score: ${score.score}/${score.maxScore}\n`;
      reportContent += `Assessment: ${score.label}\n`;
      reportContent += `Description: ${score.description}\n\n`;
    });
    
    reportContent += `## Recommendations\n\n`;
    analysis.recommendations.forEach(rec => {
      reportContent += `### ${rec.title}\n`;
      reportContent += `Priority: ${rec.priority.charAt(0).toUpperCase() + rec.priority.slice(1)}\n`;
      reportContent += `${rec.description}\n\n`;
    });
    
    reportContent += `## Market Trends\n\n`;
    analysis.trends.forEach(trend => {
      reportContent += `### ${trend.title}\n`;
      reportContent += `Impact: ${trend.impact.charAt(0).toUpperCase() + trend.impact.slice(1)}\n`;
      reportContent += `${trend.description}\n\n`;
    });
    
    reportContent += `## SWOT Analysis\n\n`;
    
    reportContent += `### Strengths\n`;
    analysis.swot.strengths.forEach(strength => {
      reportContent += `- ${strength}\n`;
    });
    reportContent += `\n`;
    
    reportContent += `### Weaknesses\n`;
    analysis.swot.weaknesses.forEach(weakness => {
      reportContent += `- ${weakness}\n`;
    });
    reportContent += `\n`;
    
    reportContent += `### Opportunities\n`;
    analysis.swot.opportunities.forEach(opportunity => {
      reportContent += `- ${opportunity}\n`;
    });
    reportContent += `\n`;
    
    reportContent += `### Threats\n`;
    analysis.swot.threats.forEach(threat => {
      reportContent += `- ${threat}\n`;
    });
    reportContent += `\n\n`;
    
    reportContent += `## Your Responses\n\n`;
    questionnaireSections.forEach(section => {
      reportContent += `### ${section.title}\n\n`;
      section.questions.forEach(question => {
        const answer = answers[question.id];
        if (answer) {
          const displayAnswer = question.type === 'select' || question.type === 'radio' 
            ? getOptionLabel(question.id, answer) 
            : answer;
          reportContent += `**${getQuestionText(question.id)}**\n${displayAnswer}\n\n`;
        }
      });
    });
    
    reportContent += `\n---\n`;
    reportContent += `Report generated by Quest Your Business (QYB) on ${new Date().toLocaleDateString()}\n`;
    
    // Create a blob and download link
    const blob = new Blob([reportContent], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `QYB_Business_Analysis_${new Date().toISOString().slice(0, 10)}.md`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  return (
    <Button
      variant="primary"
      icon={<DownloadIcon className="w-4 h-4" />}
      onClick={generateReport}
    >
      Export Analysis Report
    </Button>
  );
};

export default ExportReport;